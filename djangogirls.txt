
PS E:\coder\Python\Projects\djangogirls> C:\Users\Choko\AppData\Local\Programs\Python\Python38\python -m venv myvenv
PS E:\coder\Python\Projects\djangogirls> myvenv\Scripts\activate
	(myvenv) PS E:\coder\Python\Projects\djangogirls>

	ПРИМЕЧАНИЕ: в Windows 10 при работе в Windows PowerShell ты можешь получить ошибку вида 
	execution of scripts is disabled on this system. В этом случае открой ещё одно окно Windows 
	PowerShell, выбрав опцию «Запустить от имени Администратора». Затем перед использованием 
	виртуального окружения попробуй запустить следующую команду:

	command-line
	C:\WINDOWS\system32> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
		Execution Policy Change
		The execution policy helps protect you from scripts that you do not trust. Changing the 
			execution policy might expose you to the security risks described in the 
			about_Execution_Policies help topic at http://go.microsoft.com/fwlink/?LinkID=135170. 
			Do you want to change the execution policy? [Y] Yes  [A] Yes to All  [N] No  [L] No to All 
			[S] Suspend  [?] Help (default is "N"): A

-----------------------------------------------------------------------------
		Установка Django

    После запуска virtualenv ты можешь установить Django.

    Перед этим мы должны удостовериться, что у тебя установлена последняя версия pip — программы, 
    которую мы используем для установки Django.

    command-line
(myvenv) ~$ python -m pip install --upgrade pip

    Установка библиотек через указание требований
    Файл с требованиями (requirements) хранит список зависимостей, которые нужно установить с 
    помощью pip install:

    Для начала создай файл requirements.txt внутри директории djangogirls/, используя текстовый 
    редактор, который ты установила ранее. Просто создай в редакторе новый файл, а затем сохрани
    его под именем requirements.txt в директории djangogirls/. После этого твоя директория будет 
    выглядеть так:

djangogirls
└───requirements.txt
В файл djangogirls/requirements.txt нужно добавить такой текст:

djangogirls/requirements.txt
Django~=2.2.4

    Теперь выполни команду 

pip install -r requirements.txt

    , чтобы установить Django.

    Вот и всё! Теперь ты (наконец-то) готова создать своё Django-приложение!
===========================================================================
    ------------------------------------------------------------------------------

    Команда (Windows)	Команда (Mac OS / Linux)	Описание			Пример
    exit				exit						Закрыть окно		exit
    cd					cd							изменить каталог	cd test
    cd					pwd							вывести текущий каталог	cd (Windows) или pwd (Mac OS / Linux)
    dir					ls							список каталогов/файлов	dir
    copy	cp	копировать файл	copy c:\test\test.txt c:\windows\test.txt
    move	mv	переместить файл	move c:\test\test.txt c:\windows\test.txt
    mkdir	mkdir	создать новый каталог	mkdir testdirectory
    rmdir (или del)	rm	удалить файл	del c:\test\test.txt
    rmdir /S			rm -r						удалить каталог		rm -r testdirectory
    [CMD] /?	man [CMD]	справка для команды	cd /? (Windows) или man cd (Mac OS / Linux)

    ---------------------------------------------
    Ошибки
    TypeError, NameError, KeyError, SyntaxError

    Списки
    lottery = [3, 42, 12, 19, 30, 59]
    a = []

    Индекс — это номер позиции в списке, на котором находится нужное нам значение. Программисты 
    предпочитают начать считать с 0, так что первому объекту в списке соответствует индекс 0, 
    следующему — 1, и так далее. 

    Чтобы удалить что-либо из списка, тебе понадобятся индексы, с которыми мы уже разобрались выше, 
    и команда pop(). Давай попробуем закрепить пройденное на примере: мы будем удалять первый 
    элемент из нашего списка.

    command-line
    >>> print(lottery)
    [59, 42, 30, 19, 12, 3, 199]
    >>> print(lottery[0])
    59
    >>> lottery.pop(0)
    59
    >>> print(lottery)
    [42, 30, 19, 12, 3, 199]

    ----------------------------------------------------
    Словари

    Для проходящих руководство дома: этот раздел рассмотрен в видео 
    https://www.youtube.com/watch?v=ZX1CVvZLE6c.

    Словари схожи со списками, но ты обращаешься к значениям словаря по ключу, а не по индексу. 
    Ключом может быть любая строка или число. Давай создадим пустой словарь:

    command-line
    >>> {}
    {}
    Это показывает, что мы создали пустой словарь. Ура!

    Теперь попробуй следующую команду (можешь заменить значения на своё имя, страну и т.д.):

    command-line
    >>> participant = {'name': 'Ola', 'country': 'Poland', 'favorite_numbers': [7, 42, 92]}

    -----------------------------------------------------------------------
    Что такое Django?

    Django (/ˈdʒæŋɡoʊ/ джанго) — бесплатный и свободный фреймворк для веб-приложений, написанный 
    на Python. Фреймворк — это набор компонентов, которые помогают разрабатывать веб-сайты быстро 
    и просто.

    Каждый раз при разработке веб-сайтов требуются похожие компоненты: способ аутентифицировать 
    пользователей (вход, выход, регистрация), панель управления сайтом, формы, инструменты для 
    загрузки файлов и т. д.

    К счастью для нас, другие люди обратили внимание на возникновение однотипных проблем при 
    веб-разработке, так что они объединились и создали фреймворки (Django и другие), которые 
    предлагают нам готовые шаблоны для использования.

    Фреймворки существуют, чтобы облегчить процесс разработки и позволить нам не изобретать колесо.

    Зачем нам нужен фреймворк?

    Чтобы понять, для чего же нам нужен Django, нам нужно ближе познакомиться с серверами. Во-первых,
    сервер должен узнать о том, что мы ждём от него веб-страницу.

    Представь себе почтовый ящик (порт), который проверяется на наличие новых писем (запросов). Это 
    делает веб-сервер. Когда письмо приходит, сервер читает его и отправляет ответ с веб-страничкой. 
    Однако чтобы что-то отправить, нам надо это что-то иметь. И Django как раз и отвечает за создание
    контента, который будет отправлен в ответе.

    -------------------------------------------------------
    Виртуальное окружение

    Перед установкой Django мы попросим тебя установить крайне полезный инструмент, который поможет 
    тебе содержать среду разработки в чистоте. Можно пропустить этот шаг, но мы очень советуем этого 
    не делать. Использование лучших рекомендаций с самого начала убережёт от многих проблем в будущем!

    Итак, давай создадим виртуальное окружение (оно также называется virtualenv). Virtualenv будет 
    изолировать настройки Python/Django для каждого отдельного проекта. Это значит, что изменения 
    одного сайта не затронут другие сайты, которые ты разрабатываешь. Удобно, правда?

    Всё, что тебе нужно сделать — найти директорию, в которой мы создадим virtualenv; домашний 
    каталог вполне подойдёт. Для Windows адрес будет выглядеть так: C:\Users\Name (где Name — твоё 
    имя пользователя).

    Чтобы создать новое virtualenv, тебе нужно открыть командную строку и набрать 
    python -m venv myvenv. Это будет выглядеть так:

    command-line
    C:\Users\Name\djangogirls> python -m venv myvenv

    Здесь myvenv — имя твоего virtualenv. Ты можешь выбрать другое имя, но используй только строчные 
    буквы, без пробелов и специальных символов. Имя виртуального окружения выбирай покороче — тебе 
    придётся часто его набирать!

    Запусти виртуальное окружение, выполнив:

    command-line
    C:\Users\Name\djangogirls> myvenv\Scripts\activate

    Ты поймёшь, что virtualenv запущено, когда увидишь префикс (myvenv) в начале приглашения 
    командной строки.

    При работе с виртуальным окружением команда python будет автоматически обращаться к правильной 
    версии языка, так что ты можешь использовать просто python вместо python3.

    Отлично, теперь мы будем хранить все важные зависимости в одном месте. Наконец можно установить 
    Django!
===========================================================================
---------------------------------------------------------------------
Твой первый проект на Django!

    В Windows запусти следующую команду (не забудь добавить точку . в конце):

command-line
(myvenv) C:\Users\Name\djangogirls> django-admin.exe startproject mysite .

    Точка . крайне важна, потому что говорит скрипту установить Django в вашем текущем каталоге 
    (который и обозначается сокращённо точкой .)

    Примечание: при вводе приведённой команды помни, что тебе нужно набирать только часть, 
    начинающуюся с django-admin.exe. (myvenv) C:\Users\Name\djangogirls> — это просто пример 
    приглашения командной строки.

    django-admin.py — это скрипт, который создаст необходимую структуру директорий и файлы для нас. 
    Теперь у твоего проекта должна быть следующая структура:

djangogirls
├───manage.py
├───mysite
│        settings.py
│        urls.py
│        wsgi.py
│        __init__.py
└───requirements.txt

    Примечание: в своей структуре директорий ты также увидишь ранее созданную нами директорию с 
    виртуальным окружением.

    manage.py — это другой скрипт, который помогает с управлением сайтом. С помощью него мы, помимо 
    прочего, сможем запустить веб-сервер на твоем компьютере без установки дополнительных программ.

    Файл settings.py содержит настройки для твоего веб-сайта.

    Помнишь нашу аналогию с почтальоном? Файл urls.py содержит список шаблонов, по которым 
    ориентируется urlresolver.

-------------------------------------
Изменяем настройки

    Давай внесём изменения в mysite/settings.py. Открой файл в текстовом редакторе, который ты 
    выбрала ранее.

mysite/settings.py
TIME_ZONE = 'Europe/Moscow'

mysite/settings.py
LANGUAGE_CODE = 'ru-ru'

    Нам также необходимо добавить в настройки информацию о расположении статических файлов 
    (мы познакомимся со статическими файлами и CSS в следующих главах). Спустись в конец файла и 
    после переменной STATIC_URL добавь новую — STATIC_ROOT:

mysite/settings.py
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

    Когда наcтройка DEBUG имеет значение True, а настройка ALLOWED_HOSTS пуста, имя хост твоего 
    веб-сайта сверяется со списком ['localhost', '127.0.0.1', '[::1]']. Ни одно из значений не
    соответствует имени хоста на PythonAnywhere при публикации нашего приложения, поэтому нам 
    необходимо изменить следующую настройку:

mysite/settings.py
ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']


--------------------------------------------------------------
Настройка базы данных

    Существует множество различных баз данных, которые могут хранить данные для твоего сайта. 
    Мы будем использовать стандартную — sqlite3.

    Она уже выбрана по умолчанию в файле mysite/settings.py:

mysite/settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

    Чтобы создать базу данных для нашего блога, набери в командной строке следующее: 
    python manage.py migrate (мы должны быть в директории djangogirls, где расположен файл manage.py).
    Если всё прошло успешно, то ты увидишь следующий результат:

command-line
(myvenv) ~/djangogirls$ python manage.py migrate


---------------------------------------------------------------------------
Запуск веб-сервера

    Ты должна быть в директории, где расположен файл manage.py (в нашем случае — djangogirls). 
    Запустим веб-сервер из командной строки: python manage.py runserver:

command-line
(myvenv) ~/djangogirls$ python manage.py runserver

    Если ты работаешь в Windows, и команда падает с ошибкой UnicodeDecodeError, используй вместо 
    неё другую:

command-line
(myvenv) ~/djangogirls$ python manage.py runserver 0:8000

    Теперь тебе нужно проверить, работает ли веб-сайт — открой браузер (Firefox, Chrome, Safari, 
    Internet Explorer или любой другой) и набери следующий адрес:

    browser
http://127.0.0.1:8000/

    Если ты используешь Chromebook или Cloud9, вместо этого нажми на ссылку во всплывающем окне, 
    которая должна появиться в правом верхнем углу командного окна, в котором запущен веб сервер. 
    Ссылка может выглядеть так:

    browser
    https://<странные буквы и цифры>.vfs.cloud9.us-west-2.amazonaws.com

    Поздравляем! Ты только что создала свой первый веб-сайт и запустила его на веб-сервере! Ну не 
    круто ли?


----------------------------------------------
Модели Django

Нам нужно что-то, что будет хранить все записи нашего блога. Но прежде давай поговорим о вещах, 
называемых объектами.

Объекты

В программировании существует особая концепция, она называется объектно-ориентированным 
программированием. Идея заключается в том, что вместо скучной последовательности инструкций 
мы моделируем вещи и описываем, как они взаимодействуют друг с другом.
Объект Это совокупность поведения и свойств. 

Модель в Django

Зная, что представляет из себя объект, мы можем создать модель Django для записи в блоге.

Модель в Django — это объект определённого свойства: он хранится в базе данных. База данных 
представляет собой совокупность различных данных. Это то место, где ты будешь хранить информацию 
о своих пользователях, записях в блоге и т.д. Мы будем использовать базу данных SQLite для 
хранения информации. Это стандартная база данных в Django — её сейчас вполне хватит для наших 
нужд.

Ты можешь представить модель в базе данных как электронную таблицу с колонками (полями) и 
строками (данными).

Создание приложения

    Для аккуратности мы создадим отдельное приложение в нашем проекте. Очень удобно иметь хорошо 
    организованное рабочее место с самого начала. Для создания приложения нам понадобится набрать 
    следующую инструкцию в командной строке (из директории djangogirls, 
    где находится файл manage.py):

    Mac OS X и Linux:
    (myvenv) ~/djangogirls$ python manage.py startapp blog

Windows:
(myvenv) C:\Users\Name\djangogirls> python manage.py startapp blog

    Обрати внимание, что в нашем проекте появилась новая папка blog, которая содержит некоторые 
    файлы. Таким образом, структура нашего проекта будет выглядеть так:

    djangogirls
    ├── blog
    │   ├── __init__.py
    │   ├── admin.py
    │   ├── apps.py
    │   ├── migrations
    │   │   └── __init__.py
    │   ├── models.py
    │   ├── tests.py
    │   └── views.py
    ├── db.sqlite3
    ├── manage.py
    └── mysite
        ├── __init__.py
        ├── settings.py
        ├── urls.py
        └── wsgi.py

    После того, как приложение создано, нам нужно сообщить Django, что теперь он должен его 
    использовать. Мы сделаем это с помощью файла mysite/settings.py. Нам нужно найти INSTALLED_APPS и
    добавить к списку 'blog', прямо перед ]. Конечный результат должен выглядеть следующим образом:

mysite/settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
]


Создание модели записи в блоге

    В файле blog/models.py мы определяем все Модели — модель записи для блога также пойдёт сюда.

    Открой файл blog/models.py, удали весь текст и вставь на его место следующий код:

    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#blog/models.py
from django.conf import settings
from django.db import models
from django.utils import timezone


class Post(models.Model):
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(default=timezone.now)
    published_date = models.DateTimeField(blank=True, null=True)

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Убедись, что использовала два символа нижнего подчёркивания (_) с обеих сторон от метода str. 
    Это соглашение часто используется при программировании на Python, и иногда его называют 
    "dunder" (сокращение от англ. "double-underscore").

    models.CharField — так мы определяем текстовое поле с ограничением на количество символов.
    models.TextField — так определяется поле для неограниченно длинного текста. 
    models.DateTimeField — дата и время.
    models.ForeignKey — ссылка на другую модель.



    Создаём таблицы моделей в базе данных
    
    Последним шагом будет добавление нашей модели в базу данных. Сначала мы должны дать Django 
    знать, что сделали изменения в нашей модели (мы её только что создали!). 
    Набери 
    python manage.py makemigrations blog
    . Должно получиться примерно так:

    command-line
(myvenv) ~/djangogirls$ python manage.py makemigrations blog
    Migrations for 'blog':
      blog/migrations/0001_initial.py:
      - Create model Post


      Django создал для нас файл с миграцией для базы данных. 
      Набери python manage.py migrate blog, результат должен быть следующим:

    command-line
(myvenv) ~/djangogirls$ python manage.py migrate blog
    Operations to perform:
      Apply all migrations: blog
    Running migrations:
      Rendering model states... DONE
      Applying blog.0001_initial... OK

    ------------------------------------------------
    Администрирование Django
    
    Чтобы добавлять, редактировать и удалять записи, для которых мы только что создали модель, 
    мы используем панель управления администратора Django.

    Давай откроем файл blog/admin.py и заменим его содержимое на:

#blog/admin.py
from django.contrib import admin
from .models import Post

admin.site.register(Post)


    Как ты можешь заметить, мы импортировали (включили) модель Post, которую определили в 
    предыдущей главе. Чтобы наша модель стала доступна на странице администрирования, нам нужно 
    зарегистрировать её при помощи admin.site.register(Post).

    Хорошо, теперь нам нужно взглянуть на модель Post. 
    Не забудь запустить веб-сервер командой 

python manage.py runserver
    
    Перейди в браузер и набери адрес http://127.0.0.1:8000/admin/. 
    Ты увидишь страницу авторизации:

    Чтобы залогиниться, тебе сначала нужно создать суперпользователя (англ. superuser) — 
    пользователя, который имеет полный доступ к управлению сайтом. Вернись к командной строке, 
    набери 

python manage.py createsuperuser
    
    , и нажми Enter.

    Не забудь: чтобы выполнять команды во время работы сервера, открой новое окно терминала и 
    активируй в нём виртуальное окружение. Мы описывали ввод новых команд в разделе Запуск 
    веб-сервера главы Твой первый проект на Django!.

    При появлении запроса введи имя пользователя (строчными буквами, без пробелов), адрес 
    электронной почты и пароль. Не беспокойся, если пароль не появляется на экране по мере ввода,
    так и задумано. Просто напечатай его и нажми Enter, чтобы продолжить. Результат должен 
    выглядеть следующим образом (имя пользователя и почта, соответственно, будут твоими):

    command-line
(myvenv) ~/djangogirls$ python manage.py createsuperuser
    Username: admin
    Email address: admin@admin.com
    Password:
    Password (again):
    Superuser created successfully.

    Вернись в браузер и войди в систему при помощи имени пользователя и пароля, которые ты 
    только что выбрала. Ты должна попасть в панель управления Django.

    Перейди к разделу Posts и немного поэкспериментируй с ним. Добавь пять или шесть постов. 
    Не беспокойся о содержании — можешь просто скопировать и вставить текст из этого учебника, 
    чтобы сэкономить время :)

    Убедись, что выбрала для двух или трёх записей (но не больше) дату публикации. Это пригодится 
    позднее

    Если ты хочешь узнать больше об администрировании Django, то ознакомься с этим разделом 
    официальной документации: https://docs.djangoproject.com/en/1.11/ref/contrib/admin/.


    Публикация в Интернете!

    В итоге твой код будет в трёх местах. На локальном компьютере ты будешь заниматься 
    разработкой и тестированием. Когда результат тебя устроит, ты загрузишь свою программу 
    на GitHub. А твой сайт будет на PythonAnywhere, и ты сможешь обновлять его, просто загружая 
    новую версию кода с GitHub.

    Создаём Git-репозиторий
    
    Git отслеживает изменения определенного набора файлов, который называется репозиторием 
    (сокращенно "репо"). Давайте создадим такой для нашего проекта. Открой консоль и запусти 
    эти команды в папке djangogirls:

    Примечание: проверь текущий рабочий каталог с помощью команд pwd (OSX/Linux) или cd (Windows)
    перед инициализацией нового репозитория. Ты должна находиться в директории djangogirls.

    command-line
$ git init
    Initialized empty Git repository in ~/djangogirls/.git/
$ git config --global user.name "Your Name"
$ git config --global user.email you@example.com

    Инициализировать git-репозиторий придется только один раз за проект (и тебе больше не 
    придется вводить имя пользователя и адрес электронной почты).

    Git будет отслеживать изменения всех файлов и каталогов в заданной директории, однако 
    некоторые из них мы предпочли бы игнорировать. 
    
    Для этого нам нужно создать файл .gitignore в корневом каталоге репозитория. 
    Открой редактор и создай новый файл со следующим содержанием:

#.gitignore
*.pyc
*~
__pycache__
myvenv
db.sqlite3
/static
.DS_Store

    И сохрани его как .gitignore в корневом каталоге "djangogirls".

    Используй команду git status перед git add или в любой другой момент, когда ты не уверена, 
    что изменения — хорошая идея. Это убережёт тебя от таких неприятных сюрпризов, как добавление
    неправильных файлов. Команда git status возвращает информацию обо всех ранее 
    неотслеживаемых/изменённых/добавленных в git файлах, а также статус ветки и многое другое. 
    Результат должен быть похож на:

    command-line
$ git status
    On branch master

    No commits yet

    Untracked files:
      (use "git add <file>..." to include in what will be committed)

        .gitignore
        blog/
        manage.py
        mysite/

    nothing added to commit but untracked files present (use "git add" to track)
    И, наконец, мы сохраним наши изменения. Переключись на консоль и набери:

    command-line
$ git add --all .
$ git commit -m "My Django Girls app, first commit"
     [...]
     13 files changed, 200 insertions(+)
     create mode 100644 .gitignore
     [...]
     create mode 100644 mysite/wsgi.py

    Загружаем код в репозиторий GitHub
